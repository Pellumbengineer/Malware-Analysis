from __future__ import division, print_function
from model import feature_extraction
import joblib
import sys
import os
from flask import Flask, redirect, url_for, request, render_template
from werkzeug.utils import secure_filename
import json

app = Flask(__name__)

# Model saved with Keras model.save()
filename = './model/finalized_model_LinearSVC.joblib'

# load the model from disk
model = joblib.load(filename)
print('Model loaded. Check http://127.0.0.1:5000/')


def model_predict(file_path, model):
    x = []
    print("Before feature extraction")
    f = open(file_path, "r")
    features = f.readlines()
    sample = feature_extraction.count_feature_set(features)
    x.append(sample)

    pred = model.predict(x)

    return pred,x

@app.route('/upload')
def upload_file():
    return "tested"#render_template('upload_files.html')


@app.route('/upload', methods=['GET', 'POST'])
def upload():
    if request.method == 'POST':
        # Get the file from post request
        f = request.files['file']

        # Save the file to ./uploads
        basepath = os.path.dirname(__file__)
        file_path = os.path.join(
            basepath, 'uploads', secure_filename(f.filename))
        f.save(file_path)

        # Make prediction
        preds, features = model_predict(file_path, model)

        if preds == 0:
            result = "Not Malware"
        if preds == 1:
            result = "MALWARE Detected"

        data = {
            "Hardware Components": features[0][0],
            "Requested Permission": features[0][1],
            "App Component": features[0][2],
            "Filtered Intent": features[0][3],
            "Restricted API calls": features[0][4],
            "Used Permission": features[0][5],
            "Suspicion API calls": features[0][6],
            "Network Addresses": features[0][7]
        }

        return data  #render_template('upload_files.html', data=data, results=result)
    return None

if __name__ == "__main__":
    app.run(debug=True)