from __future__ import division, print_function
from model.train import feature_extraction
import joblib
import os
from flask import Flask, redirect, request, render_template, abort
from werkzeug.utils import secure_filename

main = Flask(__name__)

@main.errorhandler(404)
def page_not_found(e):

    return render_template("error_404.html"), 404


@main.errorhandler(500)
def server_error(e):
    print("This is the error: ",e)
    return "server error"#render_template("error_500.html"),500

# Model saved with Keras model.save()
filename = './model/finalized_model_LinearSVC.joblib'

# load the model from disk
model = joblib.load(filename)
print('Model loaded. Check http://127.0.0.1:5000/')


def model_predict(file_path, model):
    x = []
    print("Before feature extraction")
    f = open(file_path, "r")
    features = f.readlines()
    sample = feature_extraction.count_feature_set(features)
    x.append(sample)

    pred = model.predict(x)

    return pred, x

# @main.route('/')
# def index():
#
#     return redirect('upload')


@main.route('/upload')
def upload_file():
    return render_template('upload_files.html')


@main.route('/upload', methods=['GET', 'POST'])
def upload():
    try:
        if request.method == 'POST':
            # Get the file from post request
            f = request.files['file']

            # Save the file to ./uploads
            basepath = os.path.dirname(__file__)
            file_path = os.path.join(
                basepath, 'uploads', secure_filename(f.filename))
            f.save(file_path)

            # Make prediction
            preds, features = model_predict(file_path, model)

            if preds == 0:
                result = "Not Malware"
            if preds == 1:
                result = "MALWARE Detected"

            data = {
                "Hardware Components": features[0][0],
                "Requested Permission": features[0][1],
                "App Component": features[0][2],
                "Filtered Intent": features[0][3],
                "Restricted API calls": features[0][4],
                "Used Permission": features[0][5],
                "Suspicion API calls": features[0][6],
                "Network Addresses": features[0][7]
            }

            return render_template('upload_files.html', data=data, results=result)
        return None
    except Exception as e:
        return render_template("error_500.html", error=e)


if __name__ == "__main__":
    main.run(debug=True)
